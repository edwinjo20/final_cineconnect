security:
    # Password hashers
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # User providers
    providers:
        user_provider:
            entity:
                class: App\Entity\User
                property: email

    # Firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login_check
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api/
            stateless: true
            provider: user_provider
            jwt: ~

    # Access control
    access_control:
        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/logout, roles: PUBLIC_ACCESS }  # La page /logout est publique (tout le monde peut y acc√©der)
        - { path: ^/api/, roles: PUBLIC_ACCESS }
        - { path: ^/api/films, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }
        - { path: ^/api/reviews, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/comments, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/admin, roles: ROLE_ADMIN }



monolog:
    channels: ['security']

    handlers:
        main:
            type: stream
            path: "%kernel.logs_dir%/%kernel.environment%.log"
            level: debug

        security:
            type: stream
            path: "%kernel.logs_dir%/security.log"
            level: debug
